

IOI - try having sockets for lobby, chat and channels be accessible
      from redux, so I don't have to pass socket as prop so much


IOI - after implementing debate session feature,
      hook up pastDebates so that active debates do not show up
        - debate session will stamp finishedAt, and this will be used as
          logic for showing/not-showing debates
      IOI - OR:
        - make it so that active debates are seen as active and can be spectated
          by others



IOI - test going into a debate, then going into past debate, then back'ing
      to the original debate
        - confirm that message composer still shows


IOI - transfer validation behavior from RegisterContainer.jsx
      to new Register.jsx
        IOI - then clean up Register files and tests...

IXI - ENHANCE: for login/registration page forwarding, impl isolated form
               forwarding component which won't pollute application state
               (https://github.com/reactjs/redux/issues/297)
                 - current impl is using app's redux store and thus
                   harder to reuse

IOI - BUG:
        - navigate to a channel page from /home
        - press back
        - make new channel
        - result: 2 new channels show in channels log

IOI - BUG: go to a chatlog with items and refresh page
            - items go away
      to fix: implement localStorage or cookies to save redux state upon pageload
                http://stackoverflow.com/questions/34038726/redux-router-how-to-replay-state-after-refresh

4/15




Having message entity create ID on client, since this is spawning point for
message on database and message across clients via socket broadcast.
  - Alternative of just using mongo's _id for ID made it so that <ChatMsg />
    iteration code had to take care of making unique key; seemed to be worse
    than above solution.

1/30



Removed catch()es after then()only promises returned by Mongoose queries/find()s

1/24


Getting unique email to work on MongoDB:
-------------------------------------------------------------
http://stackoverflow.com/questions/5535610/mongoose-unique-index-not-working
1) remove all docs from collection
     - db.users.remove({})
2) From the mongo shell, execute the command:  db.users.createIndex({email: 1}, {unique: true})

1/23


Getting redux-form testing to work:
----------------------------------------------------
https://github.com/tylercollier/redux-form-test

 - upgraded to react v15, as it is required given the project's setup
 - Had to use babel-plugin-webpack-aliases to load in aliases for file paths
 - Using .babelrc to specify usage of above package, with test cmd indicating NODE_ENV=test
 - Using chai (assertions), enzyme (test utility for react) and sinon (mocking)
   as example above user
    - these libs all have high dloads, so should be good to go

1/21


Structured package.json so that webpack can build bundle.js on server, via including
webpack-associated modules in the 'dependencies' section, as opposed to 'devDependencies'.


Made decision to go with using bootstrap, as opposed to foundation. Bootstrap's form styling
is much better. Foundation modal solution worked, but had poor design.


'react-bootstrap' was key to getting a professional modal system going
   - failed/poor alternaitves: foundation modal solution, react-bootstrap-modal module
   - dependencies:
      - must use bootstrap 3 css, tried 4 and modal does not show

1/19
